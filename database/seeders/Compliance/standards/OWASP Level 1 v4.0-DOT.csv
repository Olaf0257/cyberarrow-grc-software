primary_id,sub_id,Name,Description
2,1.1,Minimum Password Length,Ensure that user set passwords are at least 12 characters in length.
2,1.2,Password Length,Ensure that passwords 64 characters or longer are permitted.
2,1.3,Passwords can Contain Spaces,Ensure that passwords can contain spaces and truncation is not performed. Consecutive multiple spaces MAY optionally be coalesced.
2,1.4,Unicode Characters are Permitted,"Ensure that Unicode characters are permitted in passwords. A single Unicode code point is considered a character, so 12 emoji or 64 kanji characters should be valid and permitted."
2,1.5,Users can Change Their Password,Ensure users can change their password.
2,1.6,Password Change Functionality,Ensure that password change functionality requires the user's current and new password.
2,1.7,Passwords Checked Against Breach Password List,"Ensure that passwords submitted during account registration, login, and password change are checked against a set of breached passwords either locally (such as the top 1,000 or 10,000 most common passwords which match the system's password policy) or using an external API. If using an API a zero knowledge proof or other mechanism should be used to ensure that the plain text password is not sent or used in verifying the breach status of the password. If the password is breached, the application must require the user to set a new nonbreached password."
2,1.8,Password Strength Meter,Ensure that a password strength meter is provided to help users set a stronger password.
2,1.9,No Password Composition Rules,Ensure that there are no password composition rules limiting the type of characters permitted. There should be no requirement for upper or lower case or numbers or special characters.
2,1.1,No Credential Rotation or History Requirements,Ensure that there are no periodic credential rotation or password history requirements.
2,1.11,Paste Functionality,"Ensure that ""paste"" functionality, browser password helpers, and external password managers are permitted."
2,1.12,Temporarily View Masked Password or Last Character Typed,"Ensure that the user can choose to either temporarily view the entire masked password, or temporarily view the last typed character of the password on platforms that do not have this as native functionality."
2,2.1,Anti-Automation Controls,"Ensure that anti-automation controls are effective at mitigating breached credential testing, brute force, and account lockout attacks. Such controls include blocking the most common breached passwords, soft lockouts, rate limiting, CAPTCHA, ever increasing delays between attempts, IP address restrictions, or risk-based restrictions such as location, first login on a device, recent attempts to unlock the account, or similar. Verify that no more than 100 failed attempts per hour is possible on a single account."
2,2.2,Weak Authenticators is Limited to Secondary Verification,"Ensure that the use of weak authenticators (such as SMS and email) is limited to secondary verification and transaction approval and not as a replacement for more secure authentication methods. Ensure that stronger methods are offered before weak methods, users are aware of the risks, or that proper measures are in place to limit the risks of account compromise."
2,2.3,Secure Notifications,"Ensure that secure notifications are sent to users after updates to authentication details, such as credential resets, email or address changes, logging in from unknown or risky locations. The use of push notifications - rather than SMS or email - is preferred, but in the absence of push notifications, SMS or email is acceptable as long as no sensitive information is disclosed in the notification."
2,3.1,System Generated Initial Passwords,"Ensure system generated initial passwords or activation codes should be securely randomly generated, should be at least 6 characters long, and may contain letters and numbers, and expire after a short period of time. These initial secrets must not be permitted to become the long term password."
2,5.1,System Generated Initial Activation or Recovery Secret Not Sent in Clear Text,Ensure that a system generated initial activation or recovery secret is not sent in clear text to the user.
2,5.2,Password Hints Not Present,"Ensure password hints or knowledge-based authentication (so-called ""secret questions"") are not present."
2,5.3,Credential Recovery Does Not Reveal Current Password,Ensure password credential recovery does not reveal the current password in any way.
2,5.4,Shared or Default Accounts Not Present,"Ensure shared or default accounts are not present (e.g. ""root"", ""admin"", or ""sa"")."
2,5.5,Authentication Factor Changed or Replaced,"Ensure that if an authentication factor is changed or replaced, that the user is notified of this event."
2,5.6,Forgotten Password Mechanisms,"Ensure forgotten password, and other recovery paths use a secure recovery mechanism, such as TOTP or other soft token, mobile push, or another offline recovery mechanism."
2,7.1,Clear Text Out of Band Authenticators,"Ensure that clear text out of band (NIST ""restricted"") authenticators, such as SMS or PSTN, are not offered by default, and stronger alternatives such as push notifications are offered first."
2,7.2,Out of Band Verifiers Expire,"Ensure that the out of band verifier expires out of band authentication requests, codes, or tokens after 10 minutes."
2,7.3,Out of Band Verifiers Used Only Once,"Ensure that the out of band verifier authentication requests, codes, or tokens are only usable once, and only for the original authentication request."
2,7.4,Communicates Over Secure Independent Channel,Ensure that the out of band authenticator and verifier communicates over a secure independent channel.
2,8.1,Time-based OTPs have Defined Lifetime,Ensure that time-based OTPs have a defined lifetime before expiring.
3,1.1,Never Reveal Session Tokens,Ensure the application never reveals session tokens in URL parameters or error messages.
3,2.1,New Session Token on User Authentication,Ensure the application generates a new session token on user authentication.
3,2.2,Session Tokens Possess 64-bit Entropy,Ensure that session tokens possess at least 64 bits of entropy.
3,2.3,Application Stores Session Tokens using Secure Methods,Ensure the application only stores session tokens in the browser using secure methods such as appropriately secured cookies (see section 3.4) or HTML 5 session storage.
3,3.1,Logout and Expiration Invalidates the Session Token,"Ensure that logout and expiration invalidate the session token, such that the back button or a downstream relying party does not resume an authenticated session, including across relying parties."
3,3.2,Re-authentication Occurs Periodically,"If authenticators permit users to remain logged in, ensure that re-authentication occurs periodically both when actively used or after an idle period. (30 days)"
3,4.1,Secure Attribute Set,Ensure that cookie-based session tokens have the 'Secure' attribute set.
3,4.2,HttpOnly Attribute Set,Ensure that cookie-based session tokens have the 'HttpOnly' attribute set.
3,4.3,SameSite Attribute,Ensure that cookie-based session tokens utilize the 'SameSite' attribute to limit exposure to cross-site request forgery attacks.
3,4.4,___Host-prefix,"Ensure that cookie-based session tokens use ""__Host-"" prefix (see references) to provide session cookie confidentiality."
3,4.5,Cookie-based Session Tokens,"Ensure that if the application is published under a domain name with other applications that set or use session cookies that might override or disclose the session cookies, set the path attribute in cookie-based session tokens using the most precise path possible."
3,7.1,Valid Login Session Before Allowing Sensitive Transactions or Account Modifications,Ensure the application ensures a valid login session or requires reauthentication or secondary verification before allowing any sensitive transactions or account modifications.
4,1.1,Application Enforces Access Control Rules,"Ensure that the application enforces access control rules on a trusted service layer, especially if client-side access control is present and could be bypassed."
4,1.2,Access Controls Cannot be Manipulated by End Users,Ensure that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.
4,1.3,Principle of Least Privilege,"Ensure that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege."
4,1.4,Deny by Default,Ensure that the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.
4,1.5,Access Controls Fail Securely,Ensure that access controls fail securely including when an exception occurs.
4,2.1,Protection Against Direct Object Attacks,"Ensure that sensitive data and APIs are protected against direct object attacks targeting creation, reading, updating and deletion of records, such as creating or updating someone else's record, viewing everyone's records, or deleting all records."
4,2.2,Anti-CSRF Mechanisms,"Ensure that the application or framework enforces a strong anti-CSRF mechanism to protect authenticated functionality, and effective anti-automation or anti-CSRF protects unauthenticated functionality."
4,3.1,Administrative Interfaces Use Multi-factor Authentication,Ensure administrative interfaces use appropriate multi-factor authentication to prevent unauthorized use.
4,3.2,Directory Browsing Disabled,"Ensure that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders."
5,1.1,Defense Against HTTP Parameter Pollution Attacks,"Ensure that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, or environment variables)."
5,1.2,Protect Against Mass Parameter Assignment Attacks,"Ensure that frameworks protect against mass parameter assignment attacks, or that the application has countermeasures to protect against unsafe parameter assignment, such as marking fields private or similar."
5,1.3,Input is Validated Using Positive Validation,"Ensure that all input (HTML form fields, REST requests, URL parameters, HTTP headers, cookies, batch files, RSS feeds, etc) is validated using positive validation (whitelisting)."
5,1.4,Structured Data is Strongly Typed and Validated Against a Defined Schema,"Ensure that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as checking that suburb and zip/postcode match)."
5,1.5,URL Redirects and Forwards Only Allow Whitelisted Destinations,"Ensure that URL redirects and forwards only allow whitelisted destinations, or show a warning when redirecting to potentially untrusted content."
5,2.1,Untrusted HTML Input from WYSIWYG Editors,Ensure that all untrusted HTML input from WYSIWYG editors or similar is properly sanitized with an HTML sanitizer library or framework feature.
5,2.2,Unstructured Data is Sanitized,Ensure that unstructured data is sanitized to enforce safety measures such as allowed characters and length.
5,2.3,Sanitize User Input Before Passing to Mail Systems,Ensure that the application sanitizes user input before passing to mail systems to protect against SMTP or IMAP injection.
5,2.4,Application Avoids Dynamic Code Execution Features,"Ensure that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed."
5,2.5,Protect Against Template Injection Attacks,Ensure that the application protects against template injection attacks by verifying that any user input being included is sanitized or sandboxed.
5,2.6,Protect Against SSRF Attacks,"Ensure that the application protects against SSRF attacks, by validating or sanitizing untrusted data or HTTP file metadata, such as filenames and URL input fields, use whitelisting of protocols, domains, paths and ports."
5,2.7,User-supplied SVG Scriptable Content,"Ensure that the application sanitizes, disables, or sandboxes user-supplied SVG scriptable content, especially as they relate to XSS resulting from inline scripts, and foreignObject."
5,2.8,User-supplied Scriptable or Expression Template Language Content,"Ensure that the application sanitizes, disables, or sandboxes user-supplied scriptable or expression template language content, such as Markdown, CSS or XSL stylesheets, BBCode, or similar."
5,3.1,Output Encoding is Relevant for Interpreter and Context Required,"Ensure that output encoding is relevant for the interpreter and context required. For example, use encoders specifically for HTML values, HTML attributes, JavaScript, URL Parameters, HTTP headers, SMTP, and others as the context requires, especially from untrusted inputs (e.g. names with Unicode or apostrophes, such as ?? or O'Hara)."
5,3.2,Output Encoding Preserves the User's Chosen Character Set and Locale,"Ensure that output encoding preserves the user's chosen character set and locale, such that any Unicode character point is valid and safely handled."
5,3.3,Context-aware Output,"Ensure that context-aware, preferably automated - or at worst, manual - output escaping protects against reflected, stored, and DOM based XSS."
5,3.4,Protected from Database Injection Attacks,"Ensure that data selection or database queries (e.g. SQL, HQL, ORM, NoSQL) use parameterized queries, ORMs, entity frameworks, or are otherwise protected from database injection attacks."
5,3.5,Contextspecific Output Encoding,"Ensure that where parameterized or safer mechanisms are not present, contextspecific output encoding is used to protect against injection attacks, such as the use of SQL escaping to protect against SQL injection."
5,3.6,Protect Against JavaScript or JSON Injection Attacks,"Ensure that the application projects against JavaScript or JSON injection attacks, including for eval attacks, remote JavaScript includes, CSP bypasses, DOM XSS, and JavaScript expression evaluation."
5,3.7,Protect Against LDAP Injection Vulnerabilities,"Ensure that the application protects against LDAP Injection vulnerabilities, or that specific security controls to prevent LDAP Injection have been implemented."
5,3.8,Protect Against OS Command Injection,Ensure that the application protects against OS command injection and that operating system calls use parameterized OS queries or use contextual command line output encoding.
5,3.9,Protect Against Local File Inclusion or Remote File Inclusion,Ensure that the application protects against Local File Inclusion (LFI) or Remote File Inclusion (RFI) attacks.
5,3.1,Protect against XPath Injection or XML Injection Attacks,Ensure that the application protects against XPath injection or XML injection attacks.
5,5.1,Prevent Hostile Object Creation or Data Tampering,Ensure that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering.
5,5.2,Correctly Restrict XML Parsers,Ensure that the application correctly restricts XML parsers to only use the most restrictive configuration possible and to ensure that unsafe features such as resolving external entities are disabled to prevent XXE.
5,5.3,Deserialization of Untrusted Data is Avoided or Protected,"Ensure that deserialization of untrusted data is avoided or is protected in both custom code and third-party libraries (such as JSON, XML and YAML parsers)."
5,5.4,JSON in Browsers or JavaScript-based Backends,"Ensure that when parsing JSON in browsers or JavaScript-based backends, JSON.parse is used to parse the JSON document. Do not use eval() to parse JSON."
6,2.1,Errors Handled in a Way to Not Enable Padding Oracle Attacks,"Ensure that all cryptographic modules fail securely, and errors are handled in a way that does not enable Padding Oracle attacks."
7,1.1,Session Token Storage,"Ensure that the application does not log credentials or payment details. Session tokens should only be stored in logs in an irreversible, hashed form."
7,1.2,Defined Under Local Privacy Laws or Relevant Security Policy,Ensure that the application does not log other sensitive data as defined under local privacy laws or relevant security policy.
7,4.1,Generic Message for Unexpected or Security Sensitive Errors,"Ensure that a generic message is shown when an unexpected or security sensitive error occurs, potentially with a unique ID which support personnel can use to investigate."
8,2.1,Set Sufficient Anti-caching Headers,Ensure the application sets sufficient anti-caching headers so that sensitive data is not cached in modern browsers.
8,2.2,Data Stored in Client Side Storage Does Not Contain Sensitive Data,"Ensure that data stored in client side storage (such as HTML5 local storage, session storage, IndexedDB, regular cookies or Flash cookies) does not contain sensitive data or PII."
8,2.3,Authenticated Data is Cleared from Client Storage,"Ensure that authenticated data is cleared from client storage, such as the browser DOM, after the client or session is terminated."
8,3.1,Data Sent in HTTP Message Body or Headers,"Ensure that sensitive data is sent to the server in the HTTP message body or headers, and that query string parameters from any HTTP verb do not contain sensitive data."
8,3.2,Method to Remove or Export Data on Demand,Ensure that users have a method to remove or export their data on demand.
8,3.3,Users Provided Clear Language Regarding Collection and Use of Supplied Information,Ensure that users are provided clear language regarding collection and use of supplied personal information and that users have provided opt-in consent for the use of that data before it is used in any way.
8,3.4,Policy in Place for Dealing with Sensitive Data,"Ensure that all sensitive data created and processed by the application has been identified, and ensure that a policy is in place on how to deal with sensitive data."
9,1.1,Secured TLS Used for Client Connectivity,"Ensure that secured TLS is used for all client connectivity, and does not fall back to insecure or unencrypted protocols."
9,1.2,TLS Testing Tools,"Ensure using online or up to date TLS testing tools that only strong algorithms, ciphers, and protocols are enabled, with the strongest algorithms and ciphers set as preferred."
9,1.3,Old Versions of Mechanisms are Disabled,"Ensure that old versions of SSL and TLS protocols, algorithms, ciphers, and configuration are disabled, such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1. The latest version of TLS should be the preferred cipher suite."
10,3.1,Auto-update Feature,"Ensure that if the application has a client or server auto-update feature, updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update."
10,3.2,Integrity Protections,"Ensure that the application employs integrity protections, such as code signing or sub-resource integrity. The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet."
10,3.3,Protection from Sub-domain Takeovers,"Ensure that the application has protection from sub-domain takeovers if the application relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change."
11,1.1,Sequential Step Order,Ensure the application will only process business logic flows for the same user in sequential step order and without skipping steps.
11,1.2,Processed in Realistic Human Time,"Ensure the application will only process business logic flows with all steps being processed in realistic human time, i.e. transactions are not submitted too quickly."
11,1.3,Enforced on a Per User Basis,Ensure the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.
11,1.4,Anti-automation Controls,"Ensure the application has sufficient anti-automation controls to detect and protect against data exfiltration, excessive business logic requests, excessive file uploads or denial of service attacks."
11,1.5,Protect Against Business Risks or Threats Using Threat Modeling Methodologies,"Ensure the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modelling or similar methodologies."
12,1.1,Application Will Not Accept Large Files,Ensure that the application will not accept large files that could fill up storage or cause a denial of service attack.
12,3.1,Protect Against Path Traversal,Ensure that user-submitted filename metadata is not used directly with system or framework file and URL API to protect against path traversal.
12,3.2,"Validated or Ignored to Prevent Disclosure, Creation, Updating or Removal of Local Files","Ensure that user-submitted filename metadata is validated or ignored to prevent the disclosure, creation, updating or removal of local files (LFI)."
12,3.3,Validated or Ignored to Prevent Disclosure or Execution of Remote Files,"Ensure that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files (RFI), which may also lead to SSRF."
12,3.4,Protects Against RFD,"Ensure that the application protects against reflective file download (RFD) by validating or ignoring user-submitted filenames in a JSON, JSONP, or URL parameter, the response Content-Type header should be set to text/plain, and the Content-Disposition header should have a fixed filename."
12,3.5,Untrusted File Metadata Not Used to Protect Against OS Command Injection,"Ensure that untrusted file metadata is not used directly with system API or libraries, to protect against OS command injection."
12,4.1,Stored Outside the Web Root,"Ensure that files obtained from untrusted sources are stored outside the web root, with limited permissions, preferably with strong validation."
12,4.2,Scanned by Antivirus,Ensure that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload of known malicious content.
12,5.1,Web Tier is Configured,"Ensure that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required."
12,5.2,Direct Requests to Upload Files Neve Executed as HTML/JavaScript,Ensure that direct requests to uploaded files will never be executed as HTML/JavaScript content.
12,6.1,Whitelist of Resources,Ensure that the web or application server is configured with a whitelist of resources or systems to which the server can send requests or load data/files from.
13,1.1,Avoid PArsing Attacks that Exploit Different URI,Ensure that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.
13,1.2,Access to Administration and Management Functions Limited to Authorized Admins,Ensure that access to administration and management functions is limited to authorized administrators.
13,1.3,API URLs,"Ensure API URLs do not expose sensitive information, such as the API key, session tokens etc"
13,2.1,Enabled RESTful HTTP Methods,"Ensure that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources."
13,2.2,JSON Schema Validation,Ensure that JSON schema validation is in place and verified before accepting input.
13,2.3,RESTful Web Services Utilizing Cookies are Protected,"Ensure that RESTful web services that utilize cookies are protected from CrossSite Request Forgery via the use of at least one or more of the following: triple or double submit cookie pattern (see references), CSRF nonces, or ORIGIN request header checks."
13,3.1,XSD Schema Validation,"Ensure that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place."
14,2.1,Verify All Components are Up-to-date,"Ensure that all components are up to date, preferably using a dependency checker during build or compile time."
14,2.2,"Unneeded Features, Documentation, Samples and Configurations are Removed","Ensure that all unneeded features, documentation, samples, configurations are removed, such as sample applications, platform documentation, and default or example users."
14,2.3,Validate the Integrity Assets,"Ensure that if application assets, such as JavaScript libraries, CSS stylesheets or web fonts, are hosted externally on a content delivery network (CDN) or external provider, Subresource Integrity (SRI) is used to validate the integrity of the asset."
14,3.1,Error Messages are Configured,"Ensure that web or application server and framework error messages are configured to deliver user actionable, customized responses to eliminate any unintended security disclosures."
14,3.2,Debug Modes are Disabled,"Ensure that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures."
14,3.3,HTTP Headers do not Expose Detailed Version Information of System Components,Ensure that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.
14,4.1,HTTP Response Contents,"Ensure that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1)."
14,4.2,API Responses Contain Content-Disposition,"Ensure that all API responses contain Content-Disposition: attachment; filename=""api.json"" (or other appropriate filename for the content type)."
14,4.3,Content Security Policy,"Ensure that a content security policy (CSPv2) is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities."
14,4.4,X-Content Type Options,Ensure that all responses contain X-Content-Type-Options: nosniff
14,4.5,HTTP Strict Transport Security Headers,"Ensure that HTTP Strict Transport Security headers are included on all responses and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains."
14,4.6,Referrer-Policy Header,"Ensure that a suitable ""Referrer-Policy"" header is included, such as ""no-referrer"" or ""same-origin""."
14,4.7,X-Frame-Options or Content-Security-Policy,Ensure that a suitable X-Frame-Options or Content-Security-Policy: frameancestors header is in use for sites where content should not be embedded in a third-party site.
14,5.1,Application Server Only Accepts HTTP Methods,"Ensure that the application server only accepts the HTTP methods in use by the application or API, including pre-flight OPTIONS."
14,5.2,Origin Header,"Ensure that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker."
14,5.3,CORS Access-Control-Allow Origin Header,"Ensure that the cross-domain resource sharing (CORS) Access-Control-AllowOrigin header uses a strict white-list of trusted domains to match against and does not support the ""null"" origin."
